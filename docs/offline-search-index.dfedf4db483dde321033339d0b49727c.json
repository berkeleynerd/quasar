[{"body":" The remainder of this guide assumes you have Windows Terminal and Winget installed and that you are using PowerShell to run the commands provided throughout.\n At TechCo we use the command-line every day along with our favorite IDE, Goland. In this section we will help you install and configure an opinionated set of tools enabling a modern and effective command line workflow to augment the capabilities of your IDE. There are certainly other terminals, shells, and IDEs out there to choose from but we think the options presented here make the most sense for experienced Windows users dedicated to the platform.\nIn addition to enabling efficient workflows, these command line tools also make following along with a guide like this one a lot simpler. There is nothing more frustrating than referring to dozens of screenshots filled with red markup and yellow highlights that inevitably go a little more out-of-date with each UI update.\n","categories":"","description":"in the beginning was the command-line ...\n","excerpt":"in the beginning was the command-line ...\n","ref":"/quasar/dev-environment/","tags":"","title":"DEV ENVIRONMENT"},{"body":" Windows Terminal is installed by default with Windows 11\n We are going to be spending a lot of time on the command line so before we do anything else let’s first install Windows Terminal via the Microsoft Store app. It is lightyears ahead of the venerable windows console and can be customized to your heart’s content.\nInstall Windows Terminal\n","categories":"","description":"a modern, feature-rich terminal for windows command-line users\n","excerpt":"a modern, feature-rich terminal for windows command-line users\n","ref":"/quasar/dev-environment/windows-terminal/","tags":"","title":"Windows Terminal"},{"body":" Winget is installed by default with Windows 11\n We are also going to need a package manager. What is a package manager you ask? Well, it’s an application you use from the command line to install, upgrade, and remove applications. If you have heard of chocolatey it’s like that but made by Microsoft. If you come from the Mac world you can think of it as a Windows version of homebrew.\nTo install winget browse to its release page on GitHub, download the latest .msixbundle file, then double-click it. Make sure the version you download is marked latest release and isn’t an old or preview release.\nDownload WinGet\nUpgrading packages You can update any app installed with winget to the latest version with the command winget upgrade \u003cpackage\u003e\nThe command winget list \u003cpackage\u003e will report the version currently installed and whether an upgrade is available. You can also run winget list without specifying a package to check if upgrades are available for any installed package.\n","categories":"","description":"discover, install, and manage applications from the command-line\n","excerpt":"discover, install, and manage applications from the command-line\n","ref":"/quasar/dev-environment/winget/","tags":"","title":"Winget"},{"body":"Finally, we need to decide on a shell to use within our terminal environment. Since this guide assumes you are using Windows we will stick with Microsoft’s default PowerShell environment for now. Other options available include Microsoft’s Windows Subsystem for Linux (WSL) and the version of the classic Linux BASH shell installed along with Git. These other options all involve additional setup, however, and come with various limitations and caveats in addition to the advantages they provide in some scenarios.\nUpdate PowerShell An older version of PowerShell called, confusingly, Windows PowerShell is included by default when Windows is installed and can not be upgraded or uninstalled. It is also locked-down by default as it is intended for system administration. You can use this version if you prefer but to do so and follow along with this guide you will need to loosen these restrictions for the current user by executing the command Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\nTo use the latest release version of PowerShell you can install it using winget :\nwinget install Microsoft.PowerShell Update the default PowerShell profile While there are some amazingly functional and visually appealing ways to customize your PowerShell prompt we are going to simply update ours using a small script that will display the Git branch associated with the current directory if it is under source control. This will help us determine at a glance if we are working in the correct branch.\nInvoke-WebRequest -Uri \"https://git.io/JXGyz\" -OutFile $PROFILE Shell and terminal defaults To load the latest version of PowerShell by default and / or configure Windows Terminal as your default terminal application navigate to the _Settings _tab in Windows Terminal using the shortcut Ctrl-, and set the following values: ","categories":"","description":"microsoft's cross-platform command-line shell and cmdlet scripting language \n","excerpt":"microsoft's cross-platform command-line shell and cmdlet scripting …","ref":"/quasar/dev-environment/powershell/","tags":"","title":"Powershell"},{"body":" Go is often referred to as Golang which also happens to be easier to Google!\n Why Go? Go is a modern, statically typed, general purpose programming language developed by Google to create reliable and efficient network applications. It’s syntax is similar to C and it attempts to combine the high-performance of a low-level language like C with the productivity and convenience of high-level languages like Python. It features garbage collection, fast build times, type inference, and first-class support for “goroutines”, lightweight coroutines that lend themselves to building highly concurrent network services. Go was open-sourced by Google in 2012.\nGo is popular because it made a number of design choices intended to make it easy to learn and the systems produced using it easy to maintain. To this end …\n Go has only 25 keywords and useful systems can be built using just the standard library which itself is performant and capable. Go compiles very quickly enabling rapid feedback and tight developer iteration loops. Go offers a backward compatibility promise. Go’s designers have promised that Go code written 5 years ago will still build. With respect to testing, benchmarking, linting, and deployment GO’S tooling is both built-in and first class.  In other words, with Go you can write code and when you come back to it a year or two later it will still build and everything will still make sense.\nAnother compelling reason to choose Go is that, per the working agreement, TTC only provides support for projects written in Go. While we would love to support Python, C#, and even Elixir (for some of us, especially Elixir!) we simply don’t have the time, expertise, and staff to support them, their tooling, their best practices, and their ecosystems.\nInstall Go To install Go launch Windows Terminal and use winget like so :\nwinget install GoLang.Go # restart shell to reload PATH You often need to restart Windows Terminal after installing a new command line utility so that PowerShell will pick up changes to the $ENV:PATH variable. Once Windows Terminal has been restarted execute the following command to insure everything is working as expected :\ngo version If all went well you should see output that looks something like the following :\n% go version go version go1.17.3 windows/amd64 {% hint style=“info” %} You have access to both system and user environment variables from the command line. Here are a few that often come in handy…\n$ENV:USERPROFILE Your user profile folder.\n$ENV:TEMP Folder for temporary files. \n$ENV:PATH List of locations searched for executable files.\n$PROFILE Path to script that executes when you open a shell. {% endhint %}\n{% embed url=“https://www.youtube.com/watch?v=446E-r0rXHI\" %} for a quick run-down kick-back and watch 100 seconds of go {% endembed %}\nGo modules Go modules aim to help solve problems related to dependency management, version selection, and reproducible builds.\nAdding module support to a project is pretty straightforward. Select any folder as the root of the module and execute go mod init \u003cmodulepath\u003e\nThis process generates a go.mod file containing the module’s path, Go version, and list of its dependencies. The go.mod file also often contains a URL indicating where the code for the module is available. This is often a reference to the project’s repository on github.com. To learn more about modules check out the documentation.\nIf no \u003cmodulepath\u003e is specified go mod init will infer it based on the the name of the current folder. Here is an example of this process executed from the command line :\nmkdir my-project cd my-project go mod init my-project A simple go.mod file will look something like this :\nmodule my-project go 1.17 The go command’s built-in documentation provides an overview of all available go mod and other go \u003csubcommand\u003e subcommands which you can access using go help from the command line like so :\ngo help mod go help mod init {% hint style=“info” %} Go 1.11 introduced module support which later became the default in version 1.16. The use of GOPATH is no longer recommended. For more information on how to use GOPATH if you run across it in the wild visit this page. {% endhint %}\nGodoc Another quality of life feature of Go is its documentation. To read Go’s documentation locally install the godoc command like so :\ngo install golang.org/x/tools/cmd/godoc@latest You can then read the docs locally by running godoc -http :8000. When you then browse to localhost:8000/pkg you will see documentation for all packages installed on your system.\nAdditional resources Go has a very large third-party module and tooling ecosystem. For a more or less complete list visit https://awesome-go.com.\n","categories":"","description":"a modern statically typed language for creating high-performance networked applications","excerpt":"a modern statically typed language for creating high-performance …","ref":"/quasar/dev-environment/go/","tags":"","title":"Go"},{"body":"Installation Chances are if you have used Jetbrains' PyCharm for Python development you are going to feel right at home using Jetbrains' Goland for Go development.\nYou can request a license from IT here. In the meantime, you can install Goland and use the default 30-day trial license by issuing the following commands. The first line downloads a file containing a few opinionated configuration options which we then supply to winget as an override to the Goland package’s default installation settings.\nInvoke-WebRequest -Uri \"https://git.io/JXGyH\" -OutFile \"goland.config\" winget install Jetbrains.GoLand --override '/S /CONFIG=\"goland.config\"' # restart shell to reload PATH To launch Goland from PowerShell and open a project in the current directory just type :\ngoland .\nNow that Goland is up and running we will configure it to use a few additional tools designed to help insure our code conforms to best practices as assessed by the various linters that we will encounter a little later in this guide.\ngoimports The goimports tool automatically formats your source code to comply with Go’s rather strict conventions. It also updates your import statements by removing unreferenced packages and attempting to add any missing imports.\nTo configure Goland to run goimports whenever a file is saved navigate to the File menu and select Settings. Then, in the resulting Settings window, expand the Tools section and select File Watchers. Next, click the + icon and add goimports from the drop-down list. When prompted to configure the tool just accept the defaults.\ngolangci-lint When you submit code to a project based on the eve service template golangci-lint automatically analyzes it to determine if it conforms to the linters' notion of best practice. If any issues are found your code will not be merged. It is important to realize that this type of error does not necessarily indicate your code has a bug; rather, it just means that your code fails to conform to the tool’s idea of what constitutes a best practice which _may _indicate a real issue. If you are _certain _that a failing lint check for a certain line of code is wrong or not applicable you can disable it by annotating the line with a specially formed comment. Be aware, however, that more often than not the linters are correct!\nTo avoid the delays associated with having a remote CI loop inform you there are issues with your code we will install golangci-lint locally so you can run it on demand.\nSince golangci-lint is written in Go we can install it using the go install command like so :\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest {% hint style=“info” %} The go install command acts a bit like a package manager for Go. By appending a version suffix, in this case @latest, we direct go to build a package in module-aware mode, ignoring the go.mod file in the current directory or any parent directory. This is useful for installing executables without affecting the dependencies of the module we are working with. {% endhint %}\nTo configure Goland to run golangci-lint whenever a file is saved navigate to the File menu and select Settings. Then, in the resulting Settings dialog, expand the Tools section and select External Tools. Next, click the + icon and provide the following values :\n   Field Value     Name golangci-lint   Program golangci-lint   Arguments run --out-format tab --sort-results --path-prefix $FileDir$   Working Directory $FileDir$    To activate the linter navigate to the Tools menu, select External Tools, and then click **golangci-lint **:\nFinally, since we will occasionally need to tweak deployment parameters we will add the terraform plugin via the Settings dialogue as well :\nRefactoring In upcoming sections this guide will often emphasize the importance of refactoring. One reason we recommend Goland is because it offers excellent support for helping you perform sweeping refactors with confidence.\nThe following operations are so common that we recommended learning the keyboard shortcuts associated with them.\n  Extract variable\nBeing able to easily take magic values and assign them to variables helps you simplify your code.\nTo accomplish this in Goland highlight a value and use ctrl-alt-v\n  Extract method or function\nIt is important to be able to take a section of code and extract it into a function or method.\nTo accomplish this in Goland select the expression you want to extract and use ctrl-alt-m\n  Rename\nYou should be able to confidently rename symbols across all files in a project.\nTo rename a symbol in Goland position the caret in the symbol and hit shift-f6\n  go fmt\nGo has an opinionated formatter called go fmt\nWe configured Goland to run this on every file save via the goimports command but you can also run it against a single file using ctrl-alt-l\n  Run tests\nYou should be able to do any of the above and then quickly re-run your tests to ensure you haven’t broken anything.\nIn Goland you can run a selected test or test folder using the ctrl-shift-f10 shortcut, but what you should _really _do is create a comprehensive run configuration for all of your tests.\n  View function signature\nYou should never be unsure how to call a function in Go. Your IDE should readily display its documentation, parameters, what it returns, etc…\nIn Goland you can type ctrl-q with the cursor positioned within the function name or mouse-hover over a function call to view that function’s signature.\nFor parameter information specifically type ctrl-p with the cursor positioned within the function’s parenthesis.\n  View function definition\nIf it’s still not clear what a function does, you should be able to jump to the source code and try and figure it out yourself.\nIn goland type ctrl-b with the cursor positioned within the function name or ctrl-click or middle-click on the function call to jump to its implementation.\n  Find usages of a symbol\nBeing able to see the context of a function being called can help you better understand that function.\nTo find usages of a function or other symbol through the current project type ctrl-shift-f7 with the cursor positioned within the symbol’s name.\n  The TL;DR here is that mastering your tools will help you concentrate on the code and reduce context switching.\nLight-edit mode When you open a file from the command line using the goland command in a folder that does not contain a Jetbrains project Goland opens it in a “light weight” editing mode. While this is convenient for making simple edits this mode lacks most of the features you might otherwise expect from a Jetbrains IDE.\n","categories":"","description":"jetbrains' go ide","excerpt":"jetbrains' go ide","ref":"/quasar/dev-environment/goland/","tags":"","title":"Goland"},{"body":"EVE’s thoroughly modern domain service architecture is now feature complete so there has never been a better time to transcend the monolith and help make the dream of EVE Forever a reality.\nFrom the perspective of even a seasoned EVE developer, however, there are a lot of new technologies and concepts you need to be familiar with to effectively contribute to this effort. Furthermore, it’s hard to know exactly where to start on this journey and how to stay on the optimal path through the multitude of confluence pages, READMEs, FAQs, blog posts, and third-party documentation you encounter along the way.\nIn this guide we attempt to provide just such a starting point for developers new to CCP’s domain service architecture and its long list of technologies. Our goal is to help you navigate step-by-step past each technological challenge, summarize the essential knowledge you need to keep going, and point out important internal and external resources you will want to circle back to later once you are well on your way to delivering real business and gameplay value for both CCP and its players alike.\nSetting expectations Like many other teams at CCP, TechCo maintains an official working agreement designed to facilitate a positive and productive working relationship between its staff and other developers throughout the company. This is an important document and you should read it in its entirety and bookmark it to refer to later. In fact, many of the topics we will consider in this guide are sourced directly from the working agreement and expanded on to add clarity, detail, and substance.\nWhere to find help If you have questions or run into issues while following along with this guide feel free to ask us for help on Slack. Google and Stack Overflow are surprisingly good resources, as always, but sometimes miss the mark … when this happens we are here to help!\n For questions about the Go language, tooling, and ecosystem in general reach out for help in the #golang channel. For questions about how to design amazing, bullet-proof protobuf definitions ask for a review in the #eve-proto channel. For all other questions either drop by our desks or chat with us in the #eve-services channel. If you run into a blocker you can ping our help desk at @ttc-help - whoever is on-call should be able to answer your question or put you in touch with the right resource to help get your issue resolved.  {% hint style=“info” %} Roman’s excellent Eve Service FAQ is an absolutely essential read. Once you are ready to develop a service it will be an indispensable resource! {% endhint %}\nA look ahead We use Go to write code and tests, Git to handle version control, and Test Driven Design as our overarching methodology. Combined with judicious use of the command line this suite of technologies has allowed us to rapidly and reliably deliver new features while staying “in the flow.”\nIn the next few sections we briefly introduce you to each of these technologies after which we provide a comprehensive tutorial to help you learn just enough of each to kick start your development efforts. After completing this tutorial you will also be better prepared to tackle more advanced Go language learning resources.\n","categories":"","description":"a gentle introduction to development using quasar's domain service patterns and tooling\n","excerpt":"a gentle introduction to development using quasar's domain service …","ref":"/quasar/","tags":"","title":"Introduction"},{"body":"","categories":"","description":"","excerpt":"","ref":"/quasar/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/quasar/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/quasar/tags/","tags":"","title":"Tags"}]